---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import PostDescription from "../../../components/PostDescription.astro";
import Breadcrumbs from "../../../components/Breadcrumbs.astro";
import PaginationArrowsForPostsByTag from "../../../components/PaginationArrowsForPostsByTag.astro";
import { getTagColorClasses } from "./../../../utils/tagColors.js";

import { sanityClient } from "sanity:client";

export const prerender = true;

export async function getStaticPaths() {
  // Get all tags that are referenced by posts
  const TAGS_QUERY = `*[_type == "tag" && count(*[_type == "post" && references(^._id)]) > 0] {
    "slug": slug.current,
    name,
    description,
    color,
    featured
  }`;
  
  const tags = await sanityClient.fetch(TAGS_QUERY);
  
  const paths = [];
  const postsPerPage = 5;
  
  // For each tag, calculate how many pages it needs
  for (const tag of tags) {
    const POSTS_COUNT_QUERY = `count(*[_type == "post" && references(*[_type == "tag" && slug.current == "${tag.slug}"]._id)])`;
    const totalPosts = await sanityClient.fetch(POSTS_COUNT_QUERY);
    const totalPages = Math.ceil(totalPosts / postsPerPage);
    
    // Generate pages for this tag (starting from page 1)
    for (let i = 1; i <= totalPages; i++) {
      paths.push({
        params: { 
          tag: tag.slug,
          page: i.toString() 
        }
      });
    }
  }
  
  return paths;
}

const { tag, page } = Astro.params;
const currentPage = parseInt(page) || 1;
const postsPerPage = 5;
const offset = (currentPage - 1) * postsPerPage;

// Fetch tag data
const TAG_DATA_QUERY = `*[_type == "tag" && slug.current == "${tag}"][0] {
  "slug": slug.current,
  name,
  description,
  color,
  featured
}`;

const currentTagData = await sanityClient.fetch(TAG_DATA_QUERY);

// Get posts for current page
const POSTS_BY_TAG_QUERY = `{
  "posts": *[_type == "post" && references(*[_type == "tag" && slug.current == "${tag}"]._id)] | order(publishedAt desc) [${offset}...${offset + postsPerPage}] {
    _id,
    title,
    slug,
    excerpt,
    publishedAt,
    "tags": tags[]->{ name, "slug": slug.current, color }
  },
  "total": count(*[_type == "post" && references(*[_type == "tag" && slug.current == "${tag}"]._id)])
}`;

const { posts, total } = await sanityClient.fetch(POSTS_BY_TAG_QUERY);

const totalPages = Math.ceil(total / postsPerPage);
const hasNext = currentPage < totalPages;
const hasPrev = currentPage > 1;
const nextPage = hasNext ? currentPage + 1 : null;
const prevPage = hasPrev ? currentPage - 1 : null;

const pageTitle = currentPage === 1 
  ? `Posts etiquetados con ${currentTagData?.name || tag}`
  : `Posts etiquetados con ${currentTagData?.name || tag} - PÃ¡gina ${currentPage}`;
---

<BaseLayout pageTitle={pageTitle}>
    <Breadcrumbs linkList={[
        {label: "Tags", link : "/tags"},
        {label: currentTagData?.name || tag, link: currentPage === 1 ? undefined : `/tags/${tag}`},
        ...(currentPage > 1 ? [{label: `PÃ¡gina ${currentPage}`}] : [])
    ]} 
    />

    <h2 class="text-2xl mb-5">
        Posts con la etiqueta 
        <span class={`font-bold ${getTagColorClasses(currentTagData?.color).text} hover:border-b-4 hover:border-${currentTagData?.color || 'orange'}-600 hover:border-dashed`}>
            { `#${currentTagData?.name || tag}` }
        </span>
        {currentPage > 1 && (
            <span class="text-sm text-gray-500 ml-2">
                (PÃ¡gina {currentPage} de {totalPages})
            </span>
        )}
    </h2>

    {currentTagData?.description && (
        <p class="text-gray-600 mb-6 italic">
            {currentTagData.description}
        </p>
    )}

    {
        posts.length === 0 ? 
        <h2 class="text-xl">Nada por aquÃ­. Muy pronto voy a hablar de este tema, asÃ­ que date una vuelta pronto. ðŸ˜‰</h2>
        :
        <div class="flex lg:flex-row flex-col flex-wrap">
            {posts.map((post) => 
                <PostDescription
                    postURL={`/posts/${post.slug.current}`}
                    postTitle={post.title}
                    postDate={post.publishedAt}
                    postDescription={post.excerpt}
                />
            )}
        </div>
    }

    <PaginationArrowsForPostsByTag 
        next={nextPage ? `/tags/${tag}/page${nextPage}` : null}
        prev={prevPage ? `/tags/${tag}/page${prevPage}` : null}
        tagName={currentTagData?.name || tag}
        currentPage={currentPage}
        totalPages={totalPages}
    />
</BaseLayout>